#!/usr/bin/env node

/**
 * Module dependencies.
 */

<<<<<<< HEAD
var app = require("../app");
var debug = require("debug")("jmrc-node:server");
var http = require("http");

var https = require("https");
var fs = require("fs");
//https请求
const httpsOption = {
    key: fs.readFileSync("./public/httpskey/2_linzhenhuan.net.key"),
    cert: fs.readFileSync("./public/httpskey/1_linzhenhuan.net_bundle.crt"),
};

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);
var server = https.createServer(httpsOption, app).listen(443);
=======
var app = require('../app');
<<<<<<< HEAD
var debug = require('debug')('jmrc-node:server');
=======
var debug = require('debug')('jmrc-nodejs:server');
>>>>>>> a7f99fdf883d027c56c6b883ff88ae64289028b3
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
>>>>>>> ff525cd7e5718d690accc446ec90e34341248e75

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
// var server = https.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
